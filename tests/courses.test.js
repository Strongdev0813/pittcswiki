const fs = require("fs").promises
const path = require("path")
const { scrapeCourseDescription } = require("../helpers/courses/course_scraper")
const categorize = require("../src/utils/course-categorizer")

test("Autogenerated course info file exists", async () => {
  console.log(__dirname)
  const d = await fs.readFile(
    path.join(
      __dirname,
      "..",
      "src",
      "pages",
      "courses",
      "autogenerated_course_info.json"
    )
  )
  expect(d.courses)
})

test.skip("Properly scrapes Pitt SCI website for course info", async () => {
  const cs445 = await scrapeCourseDescription(
    "http://courses.sci.pitt.edu/courses/view/CS-0445"
  )
  expect(cs445.credits).toBe(3)
  expect(cs445.description)
})

test("Course categorizer", () => {
  const courses = Array(100)
    .fill(1)
    .map((_, i) => ({ id: "TEST" + (i + 1000), title: "Test " + i }))
    .filter((course) => course.id != "TEST1008")

  const categories = [
    {
      courses: ["TEST1002", "TEST1003", "TEST1004"],
    },
    {
      courses: ["TEST1005 - 1009"],
    },
    {
      courses: ["TEST1090"],
    },
  ]
  const categorized = categorize(courses, categories)
  expect(categorized[0].courses).toEqual([
    { id: "TEST1002", title: "Test 2" },
    { id: "TEST1003", title: "Test 3" },
    { id: "TEST1004", title: "Test 4" },
  ])
  expect(categorized[1].courses).toEqual([
    { id: "TEST1005", title: "Test 5" },
    { id: "TEST1006", title: "Test 6" },
    { id: "TEST1007", title: "Test 7" },
    { id: "TEST1009", title: "Test 9" },
  ])
})
