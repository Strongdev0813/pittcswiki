import React from "react"
import { graphql, Link } from "gatsby"
import Layout from "../layout"
import Testimonial from "../testimonial"
import SEO from "../seo"
import { cleanCourseId, cleanCourseTitle } from "../../utils/course-namer"
import COURSE_INFO from "../../pages/courses/autogenerated_course_info.json"
import "../../styles/post.scss"

export default function Template({
  data, // this prop will be injected by the GraphQL query below.
}) {
  const { markdownRemark, allGoogleSheetCourseTestimonials } = data
  const { frontmatter, html } = markdownRemark
  const modifiedTime = markdownRemark.parent.modifiedTime
  const courseTitle = cleanCourseTitle(frontmatter.title)
  const courseId = frontmatter.id
  // TODO, make the autogenerated create a hash map instead of a list. We can
  // also add a pipeline, where it scrapes, creates the list based on category,
  // and parses the preqreqs with the peg js parser
  const courseData = COURSE_INFO.courses.filter(({ id }) => id === courseId)[0]
  return (
    <Layout>
      <SEO title={courseId + " - " + frontmatter.title} />
      <div className="blog-post-container">
        <div className="blog-post">
          <div className="frontmatter">
            <h1 className="title">{cleanCourseId(courseId)}</h1>
            <h2 className="sub-title">{courseTitle}</h2>
            <i className="date">Last updated on {modifiedTime}</i>
          </div>
          <div className="mb-4">
            <span className="font-bold">Requirements</span>
            <span>{courseData.requirements}</span>
          </div>
          <div>
            <h2>Description</h2>
            <p>{courseData.description}</p>
          </div>
          <div
            className="blog-post-content"
            dangerouslySetInnerHTML={{ __html: html }}
          />
          <h2>Testimonials</h2>
          <div>
            <pre>
              {JSON.stringify(allGoogleSheetCourseTestimonials.edges, false, 4)}
            </pre>
            {allGoogleSheetCourseTestimonials.edges.map((item, key) => (
              <Testimonial item={item} />
            ))}
          </div>
          <h2>Resources</h2>
          <pre>Drag to upload stuff here please</pre>
          <Link to="/">(TODO: change this) Homepage</Link>
        </div>
      </div>
    </Layout>
  )
}

export const pageQuery = graphql`
  query($path: String!, $courseId: String!) {
    markdownRemark(frontmatter: { path: { eq: $path } }) {
      html
      frontmatter {
        path
        title
        id
      }
      parent {
        ... on File {
          modifiedTime(formatString: "MMMM Do YYYY")
        }
      }
    }
    allGoogleSheetCourseTestimonials(filter: { courseId: { eq: $courseId } }) {
      edges {
        node {
          courseId
          description
          difficulty
          name
          prof
          recommend
          term
          workload
          workloadDescription
          year
        }
      }
    }
  }
`
